# service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pod-reader-sa
  namespace: kuberise

---
# role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-reader-role
  namespace: kuberise
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["app-config"]  # Only allows access to a specific ConfigMap

---
# role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pod-reader-binding
  namespace: kuberise
subjects:
- kind: ServiceAccount
  name: pod-reader-sa
  namespace: kuberise
roleRef:
  kind: Role
  name: pod-reader-role
  apiGroup: rbac.authorization.k8s.io

---
# configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: kuberise
data:
  allowed-setting: "true"
  app-mode: "production"

---
# test-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-config
  namespace: kuberise
data:
  test-setting: "test"

---
# deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pod-reader-app
  namespace: kuberise
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pod-reader
  template:
    metadata:
      labels:
        app: pod-reader
    spec:
      serviceAccountName: pod-reader-sa  # Specify the service account
      containers:
      - name: pod-reader
        image: bitnami/kubectl:latest
        resources: {}
        command:
        - "sh"
        - "-c"
        - |
          while true; do
            echo "Listing pods in namespace..."
            kubectl get pods
            echo "Trying to read allowed ConfigMap..."
            kubectl get configmap app-config
            echo "Trying to read unauthorized ConfigMap..."
            kubectl get configmap test-config || echo "Access denied to test-config as expected"
            sleep 30
          done

### Some use case for SA permission
#   - (CI/CD) pipelines often need to deploy or update applications within the cluster.
#   - Monitoring and logging tools may require access to cluster resources to collect metrics and logs.
#   - External services may need to interact with the cluster to perform specific tasks, such as scaling or load balancing.
#   - Security tools may need to scan the cluster for vulnerabilities or misconfigurations.
#   - Backup and restore processes may require access to persistent storage volumes.
#   - In microservices architectures, services may need to discover and communicate with each other.
#   - Custom controllers or operators running within the cluster often need to watch and manage custom resources.
